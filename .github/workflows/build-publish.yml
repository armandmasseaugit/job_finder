name: Build & Publish Docker Images

description: |
  Build and push Docker images for all services. Handles dependencies between base, backend, and frontend images.

on:
  push:
    branches: [main]
    tags: ['v*']
  workflow_dispatch:
    inputs:
      tag:
        description: 'Docker tag to use'
        required: true
        default: 'latest'
      build_base:
        description: 'Build base image'
        required: false
        type: boolean
        default: true
      build_kedro:
        description: 'Build Kedro image'
        required: false
        type: boolean
        default: true
      build_fastapi:
        description: 'Build FastAPI backend image'
        required: false
        type: boolean
        default: true
      build_frontend:
        description: 'Build Modern Frontend image'
        required: false
        type: boolean
        default: true

env:
  REGISTRY: docker.io
  IMAGE_PREFIX: ${{ secrets.DOCKER_USERNAME }}/job_finder

jobs:
  build-base:
    name: üî® Build Base Image
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.build_base != 'false' }}
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - uses: docker/metadata-action@v5
        id: meta
        with:
          images: ${{ env.IMAGE_PREFIX }}_base
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=${{ github.event.inputs.tag || 'latest' }},enable={{is_default_branch}}
      - uses: docker/build-push-action@v5
        with:
          context: .
          file: base.Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  build-frontend:
    name: üåê Build Frontend Image
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.build_frontend != 'false' }}
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - uses: docker/metadata-action@v5
        id: meta
        with:
          images: ${{ env.IMAGE_PREFIX }}_frontend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=${{ github.event.inputs.tag || 'latest' }},enable={{is_default_branch}}
      - uses: docker/build-push-action@v5
        with:
          context: .
          file: frontend.Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  build-services:
    name: üöÄ Build Kedro & FastAPI Images
    runs-on: ubuntu-latest
    needs: build-base
    strategy:
      matrix:
        include:
          - service: kedro
            dockerfile: kedro.Dockerfile
            enabled: ${{ github.event.inputs.build_kedro != 'false' }}
          - service: fastapi
            dockerfile: fastapi.Dockerfile
            enabled: ${{ github.event.inputs.build_fastapi != 'false' }}
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - uses: docker/metadata-action@v5
        id: meta
        with:
          images: ${{ env.IMAGE_PREFIX }}_${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=${{ github.event.inputs.tag || 'latest' }},enable={{is_default_branch}}
      - uses: docker/build-push-action@v5
        if: matrix.enabled != 'false'
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  security-scan:
    name: üîí Security Scan
    runs-on: ubuntu-latest
    needs: [build-base, build-frontend, build-services]
    if: github.event_name != 'workflow_dispatch'
    strategy:
      matrix:
        service: [base, kedro, fastapi, frontend]
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.IMAGE_PREFIX }}_${{ matrix.service }}:latest
          format: 'sarif'
          output: 'trivy-results-${{ matrix.service }}.sarif'
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results-${{ matrix.service }}.sarif'
